/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package package_Vistas;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import package_Modelo.Alumno;
import package_Modelo.Inscripcion;
import package_Modelo.Materia;
import package_Persistencia.AlumnoData;
import package_Persistencia.InscripcionData;
import package_Persistencia.MateriaData;

/**
 *
 * @author Usuario
 */
public class VistaNotas extends javax.swing.JInternalFrame {

    ArrayList<Materia> materias = new ArrayList();
    ArrayList<Alumno> alumnos = new ArrayList();
    private MateriaData matData = new MateriaData();
    private AlumnoData almData = new AlumnoData();
    private InscripcionData inscData = new InscripcionData();

    private DefaultTableModel modelo = new DefaultTableModel();

    public VistaNotas() {
        initComponents();
        matData = new MateriaData();
        materias = matData.mostrarMaterias();
        alumnos = (ArrayList<Alumno>) almData.mostrarAlumnos();
        armarCabecera();
        cargarAlumnos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jB_guardar = new javax.swing.JButton();
        jB_salir = new javax.swing.JButton();
        jC_alumno = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jT_tabla = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Carga de Notas");

        jLabel2.setText("Seleccione un alumno:");

        jB_guardar.setText("Guardar");
        jB_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_guardarActionPerformed(evt);
            }
        });

        jB_salir.setText("Salir");
        jB_salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_salirActionPerformed(evt);
            }
        });

        jC_alumno.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jC_alumnoComponentAdded(evt);
            }
        });
        jC_alumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jC_alumnoActionPerformed(evt);
            }
        });

        jT_tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Codigo", "Nombre", "Nota"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jT_tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jT_tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jT_tabla);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jB_guardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jB_salir)
                .addGap(88, 88, 88))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(28, 28, 28)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(137, 137, 137)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jC_alumno, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jC_alumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jB_guardar)
                    .addComponent(jB_salir))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jC_alumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jC_alumnoActionPerformed
        int dniSeleccionado = obtenerDNISeleccionado();
        Alumno alumno = almData.buscarAlumnoporDNI(dniSeleccionado);
        if (alumno != null) {
            cargarMaterias(alumno);
        }
    }//GEN-LAST:event_jC_alumnoActionPerformed

    private void jB_salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_salirActionPerformed
        dispose();
    }//GEN-LAST:event_jB_salirActionPerformed

    private void jC_alumnoComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jC_alumnoComponentAdded

    }//GEN-LAST:event_jC_alumnoComponentAdded

    private void jB_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_guardarActionPerformed
        for (int i = 0; i < jT_tabla.getRowCount(); i++) {
            int idMateria = (Integer) jT_tabla.getValueAt(i, 0);
            String notaString = jT_tabla.getValueAt(i, 2).toString();
            Double nuevaNota = Double.parseDouble(notaString);
            int dniSeleccionado = obtenerDNISeleccionado();
            Alumno alumno = almData.buscarAlumnoporDNI(dniSeleccionado);
            if (alumno != null) {
                inscData.actualizarNota(alumno.getIdAlumno(), idMateria, nuevaNota);
            }
        }
        JOptionPane.showMessageDialog(null, "Notas guardadas correctamente");
    }//GEN-LAST:event_jB_guardarActionPerformed

    private void jT_tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_tablaMouseClicked
 
    }//GEN-LAST:event_jT_tablaMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_guardar;
    private javax.swing.JButton jB_salir;
    private javax.swing.JComboBox<String> jC_alumno;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jT_tabla;
    // End of variables declaration//GEN-END:variables

    private void cargarAlumnos() {
        AlumnoData alumData = new AlumnoData();
        ArrayList<Alumno> listaAlumnos = alumData.mostrarAlumnos();
        jC_alumno.removeAllItems();
        for (Alumno alumno : listaAlumnos) {
            String descripcionAlumno = alumno.getDni() + ", " + alumno.getApellido() + ", " + alumno.getNombre();
            jC_alumno.addItem(descripcionAlumno);
        }
    }
    private void armarCabecera() {
        modelo.addColumn("Codigo");
        modelo.addColumn("Nombre");
        modelo.addColumn("Nota");
        jT_tabla.setModel(modelo);
    }
    private void cargarMaterias(Alumno alumno) {
        InscripcionData inscripcionData = new InscripcionData();
        ArrayList<Inscripcion> inscripciones = (ArrayList<Inscripcion>) inscripcionData.obtenerInscripcionesPorAlumno(alumno.getIdAlumno());
        DefaultTableModel modelo = (DefaultTableModel) jT_tabla.getModel();
        modelo.setRowCount(0);
        for (Inscripcion inscripcion : inscripciones) {
            modelo.addRow(new Object[]{
                inscripcion.getMateria().getIdMateria(),
                inscripcion.getMateria().getNombre(),
                inscripcion.getNota()
            });
        }
    }
    private int obtenerDNISeleccionado() {
        String seleccion = (String) jC_alumno.getSelectedItem();
        if (seleccion != null) {
            String[] partes = seleccion.split(",");
            return Integer.parseInt(partes[0].trim());
        }
        return -1;
    }
}
